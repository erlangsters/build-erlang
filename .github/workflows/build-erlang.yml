name: Build Erlang

on:
  workflow_dispatch:
    inputs:
      erlang-version:
        description: 'Erlang version to build'
        required: true
      upload-source:
        description: 'Upload source to S3 storage'
        required: true
        type: boolean
        default: true
      upload-builds:
        description: 'Upload builds to S3 storage'
        required: true
        type: boolean
        default: true
      s3-storage-endpoint:
        description: 'URL endpoint of the S3 storage.'
        required: true
        default: 'https://storage.byteplug.io'
      s3-bucket-name:
        description: 'Name of the S3 bucket'
        required: true
        default: 'erlangsters'
      s3-path-prefix:
        description: 'Path prefix within the S3 bucket'
        default: '.'

jobs:
  download-erlang:
    runs-on: ubuntu-latest
    steps:
      - name: Restore downloaded Erlang source tarball
        id: cache-erlang
        uses: actions/cache@v4
        with:
          path: erlang-${{ github.event.inputs['erlang-version'] }}-source.tar.gz
          key: erlang-${{ github.event.inputs['erlang-version'] }}

      - name: Download Erlang source tarball
        if: steps.cache-erlang.outputs.cache-hit != 'true'
        run: |
          wget https://erlang.org/download/otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz
          mv otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz erlang-${{ github.event.inputs['erlang-version'] }}-source.tar.gz

      - name: Cache downloaded Erlang source tarball
        if: steps.cache-erlang.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: erlang-${{ github.event.inputs['erlang-version'] }}-source.tar.gz
          key: erlang-${{ github.event.inputs['erlang-version'] }}

      - name: Upload source to S3 storage
        if: ${{ github.event.inputs['upload-source'] == 'true' }}
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set target ${{ github.event.inputs['s3-storage-endpoint'] }} ${{ secrets.S3_STORAGE_ACCESS_KEY }} ${{ secrets.S3_STORAGE_SECRET_KEY }}
          ./mc cp erlang-${{ github.event.inputs['erlang-version'] }}-source.tar.gz target/${{ github.event.inputs['s3-bucket-name'] }}/erlang/${{ github.event.inputs['erlang-version'] }}/source/erlang-${{ github.event.inputs['erlang-version'] }}-source.tar.gz

      - name: Upload Erlang source tarball
        uses: actions/upload-artifact@v4
        with:
          name: erlang-source
          path: erlang-${{ github.event.inputs['erlang-version'] }}-source.tar.gz

  build-linux:
    runs-on: ubuntu-latest
    container:
      image: debian:12
    needs: download-erlang
    steps:
      - name: Download Erlang source tarball
        uses: actions/download-artifact@v4
        with:
          name: erlang-source

      - name: Build Erlang (dummy)
        run: echo "Hello world!" > erlang-${{ github.event.inputs['erlang-version'] }}-build-linux.tar.gz

      - name: Upload build to S3 storage
        if: ${{ github.event.inputs['upload-builds'] == 'true' }}
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set target ${{ github.event.inputs['s3-storage-endpoint'] }} ${{ secrets.S3_STORAGE_ACCESS_KEY }} ${{ secrets.S3_STORAGE_SECRET_KEY }}
          ./mc cp erlang-${{ github.event.inputs['erlang-version'] }}-build-linux.tar.gz target/${{ github.event.inputs['s3-bucket-name'] }}/erlang/${{ github.event.inputs['erlang-version'] }}/build/linux/erlang-${{ github.event.inputs['erlang-version'] }}-build-linux.tar.gz

      - name: Upload Erlang build tarball
        uses: actions/upload-artifact@v4
        with:
          name: erlang-build-linux
          path: erlang-${{ github.event.inputs['erlang-version'] }}-build-linux.tar.gz

  build-linux-musl:
    runs-on: ubuntu-latest
    container:
      image: alpine:3
    needs: download-erlang
    steps:
      - name: Download Erlang source tarball
        uses: actions/download-artifact@v4
        with:
          name: erlang-source

      - name: Build Erlang (dummy)
        run: echo "Hello world!" > erlang-${{ github.event.inputs['erlang-version'] }}-build-linux-musl.tar.gz

      - name: Upload build to S3 storage
        if: ${{ github.event.inputs['upload-builds'] == 'true' }}
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set target ${{ github.event.inputs['s3-storage-endpoint'] }} ${{ secrets.S3_STORAGE_ACCESS_KEY }} ${{ secrets.S3_STORAGE_SECRET_KEY }}
          ./mc cp erlang-${{ github.event.inputs['erlang-version'] }}-build-linux-musl.tar.gz target/${{ github.event.inputs['s3-bucket-name'] }}/erlang/${{ github.event.inputs['erlang-version'] }}/build/linux-musl/erlang-${{ github.event.inputs['erlang-version'] }}-build-linux-musl.tar.gz

      - name: Upload Erlang build tarball
        uses: actions/upload-artifact@v4
        with:
          name: erlang-build-linux-musl
          path: erlang-${{ github.event.inputs['erlang-version'] }}-build-linux-musl.tar.gz

  build-macos:
    runs-on: macos-latest
    needs: download-erlang
    steps:
      - name: Download Erlang source tarball
        uses: actions/download-artifact@v4
        with:
          name: erlang-source

      - name: Build Erlang (dummy)
        run: echo "Hello world!" > erlang-${{ github.event.inputs['erlang-version'] }}-build-macos.tar.gz

      - name: Upload build to S3 storage
        if: ${{ github.event.inputs['upload-builds'] == 'true' }}
        run: |
          wget https://dl.min.io/client/mc/release/darwin-arm64/mc
          chmod +x mc
          ./mc alias set target ${{ github.event.inputs['s3-storage-endpoint'] }} ${{ secrets.S3_STORAGE_ACCESS_KEY }} ${{ secrets.S3_STORAGE_SECRET_KEY }}
          ./mc cp erlang-${{ github.event.inputs['erlang-version'] }}-build-macos.tar.gz target/${{ github.event.inputs['s3-bucket-name'] }}/erlang/${{ github.event.inputs['erlang-version'] }}/build/macos/erlang-${{ github.event.inputs['erlang-version'] }}-build-macos.tar.gz

      - name: Upload Erlang build tarball
        uses: actions/upload-artifact@v4
        with:
          name: erlang-build-macos
          path: erlang-${{ github.event.inputs['erlang-version'] }}-build-macos.tar.gz

  build-windows:
    runs-on: windows-latest
    needs: download-erlang
    steps:
      - name: Download Erlang source tarball
        uses: actions/download-artifact@v4
        with:
          name: erlang-source

      - name: Build Erlang (dummy)
        run: echo "Hello world!" > erlang-${{ github.event.inputs['erlang-version'] }}-build-windows.tar.gz

      - name: Upload build to S3 storage
        if: ${{ github.event.inputs['upload-builds'] == 'true' }}
        run: |
          Invoke-WebRequest -Uri https://dl.min.io/client/mc/release/windows-amd64/mc.exe -OutFile mc.exe
          chmod +x mc.exe
          ./mc.exe alias set target ${{ github.event.inputs['s3-storage-endpoint'] }} ${{ secrets.S3_STORAGE_ACCESS_KEY }} ${{ secrets.S3_STORAGE_SECRET_KEY }}
          ./mc.exe cp erlang-${{ github.event.inputs['erlang-version'] }}-build-windows.tar.gz target/${{ github.event.inputs['s3-bucket-name'] }}/erlang/${{ github.event.inputs['erlang-version'] }}/build/windows/erlang-${{ github.event.inputs['erlang-version'] }}-build-windows.tar.gz

      - name: Upload Erlang build tarball
        uses: actions/upload-artifact@v4
        with:
          name: erlang-build-windows
          path: erlang-${{ github.event.inputs['erlang-version'] }}-build-windows.tar.gz
