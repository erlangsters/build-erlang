name: Build Erlang

on:
  workflow_dispatch:
    inputs:
      erlang-version:
        description: 'Erlang version to build'
        required: true
      upload-source:
        description: 'Upload source to S3 storage'
        required: true
        type: boolean
        default: true
      upload-builds:
        description: 'Upload builds to S3 storage'
        required: true
        type: boolean
        default: true
      s3-storage-endpoint:
        description: 'URL endpoint of the S3 storage.'
        required: true
        default: 'https://storage.byteplug.io'
      s3-bucket-name:
        description: 'Name of the S3 bucket'
        required: true
        default: 'erlangsters'
      s3-path-prefix:
        description: 'Path prefix within the S3 bucket'
        default: '.'

jobs:
  download-erlang:
    runs-on: ubuntu-latest
    steps:
      - name: Restore downloaded Erlang source tarball
        id: cache-erlang
        uses: actions/cache@v4
        with:
          path: otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz
          key: erlang-${{ github.event.inputs['erlang-version'] }}

      - name: Download Erlang source tarball
        if: steps.cache-erlang.outputs.cache-hit != 'true'
        run: |
          wget https://erlang.org/download/otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz

      - name: Cache downloaded Erlang source tarball
        if: steps.cache-erlang.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz
          key: erlang-${{ github.event.inputs['erlang-version'] }}

      - name: Upload source to S3 storage
        if: ${{ github.event.inputs['upload-source'] == 'true' }}
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set target ${{ github.event.inputs['s3-storage-endpoint'] }} ${{ secrets.S3_STORAGE_ACCESS_KEY }} ${{ secrets.S3_STORAGE_SECRET_KEY }}
          ./mc cp otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz target/${{ github.event.inputs['s3-bucket-name'] }}/erlang/${{ github.event.inputs['erlang-version'] }}/erlang-${{ github.event.inputs['erlang-version'] }}-source.tar.gz

      - name: Upload Erlang source tarball
        uses: actions/upload-artifact@v4
        with:
          name: erlang-source
          path: otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz

  build-linux:
    needs: download-erlang
    strategy:
      matrix:
        # Add 'arm64' to the list of architectures if you have a ARM64 runner
        # available.
        arch: [amd64] # [amd64, arm64]
    runs-on: ${{ matrix.arch == 'arm64' && 'linux-arm64' || 'ubuntu-latest' }}
    container:
      image: debian:12
    steps:
      - name: Download Erlang source tarball
        uses: actions/download-artifact@v4
        with:
          name: erlang-source

      # Note that the use of --prefix instead of DESTDIR is because it seems
      # that the Erlang build system does not support DESTDIR well.
      - name: Build Erlang
        run: |
          apt-get update
          apt-get install -y autoconf gcc g++ make libncurses5-dev libssl-dev
          apt-get install -y unixodbc-dev
          tar -xzf otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz
          cd otp_src_${{ github.event.inputs['erlang-version'] }}
          ./configure --without-wx --without-jinterface
          make
          make RELEASE_ROOT=/tmp/erlang-install release
          cd ..
          mv /tmp/erlang-install otp_build_${{ github.event.inputs['erlang-version'] }}
          tar -czf otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz otp_build_${{ github.event.inputs['erlang-version'] }}

      - name: Upload build to S3 storage
        if: ${{ github.event.inputs['upload-builds'] == 'true' }}
        run: |
          apt-get install -y wget
          wget https://dl.min.io/client/mc/release/linux-${{ matrix.arch }}/mc
          chmod +x mc
          ./mc alias set target ${{ github.event.inputs['s3-storage-endpoint'] }} ${{ secrets.S3_STORAGE_ACCESS_KEY }} ${{ secrets.S3_STORAGE_SECRET_KEY }}
          ./mc cp otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz target/${{ github.event.inputs['s3-bucket-name'] }}/erlang/${{ github.event.inputs['erlang-version'] }}/erlang-${{ github.event.inputs['erlang-version'] }}-build-linux-${{ matrix.arch }}.tar.gz

      - name: Upload Erlang build tarball
        uses: actions/upload-artifact@v4
        with:
          name: erlang-build-linux-${{ matrix.arch }}
          path: otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz

  build-linux-musl:
    needs: download-erlang
    strategy:
      matrix:
        # Add 'arm64' to the list of architectures if you have a ARM64 runner
        # available.
        arch: [amd64] # [amd64, arm64]
    runs-on: ${{ matrix.arch == 'arm64' && 'linux-arm64' || 'ubuntu-latest' }}
    container:
      image: alpine:3
    steps:
      - name: Download Erlang source tarball
        uses: actions/download-artifact@v4
        with:
          name: erlang-source

      - name: Build Erlang
        run: |
          apk update
          apk add --no-cache autoconf gcc g++ make ncurses-dev openssl-dev
          apk add --no-cache unixodbc-dev
          tar -xzf otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz
          cd otp_src_${{ github.event.inputs['erlang-version'] }}
          ./configure --without-wx --without-jinterface
          make
          make RELEASE_ROOT=/tmp/erlang-install release
          cd ..
          mv /tmp/erlang-install otp_build_${{ github.event.inputs['erlang-version'] }}
          tar -czf otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz otp_build_${{ github.event.inputs['erlang-version'] }}

      - name: Upload build to S3 storage
        if: ${{ github.event.inputs['upload-builds'] == 'true' }}
        run: |
          wget https://dl.min.io/client/mc/release/linux-${{ matrix.arch }}/mc
          chmod +x mc
          ./mc alias set target ${{ github.event.inputs['s3-storage-endpoint'] }} ${{ secrets.S3_STORAGE_ACCESS_KEY }} ${{ secrets.S3_STORAGE_SECRET_KEY }}
          ./mc cp otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz target/${{ github.event.inputs['s3-bucket-name'] }}/erlang/${{ github.event.inputs['erlang-version'] }}/erlang-${{ github.event.inputs['erlang-version'] }}-build-linux-musl-${{ matrix.arch }}.tar.gz

      - name: Upload Erlang build tarball
        uses: actions/upload-artifact@v4
        with:
          name: erlang-build-linux-musl-${{ matrix.arch }}
          path: otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz

  build-macos:
    runs-on: macos-latest
    needs: download-erlang
    steps:
      - name: Download Erlang source tarball
        uses: actions/download-artifact@v4
        with:
          name: erlang-source

      - name: Build Erlang
        run: |
          tar -xzf otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz
          cd otp_src_${{ github.event.inputs['erlang-version'] }}
          ./configure --without-wx --without-jinterface --without-odbc
          make
          make RELEASE_ROOT=/tmp/erlang-install release
          cd ..
          mv /tmp/erlang-install otp_build_${{ github.event.inputs['erlang-version'] }}
          tar -czf otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz otp_build_${{ github.event.inputs['erlang-version'] }}

      - name: Upload build to S3 storage
        if: ${{ github.event.inputs['upload-builds'] == 'true' }}
        run: |
          wget https://dl.min.io/client/mc/release/darwin-arm64/mc
          chmod +x mc
          ./mc alias set target ${{ github.event.inputs['s3-storage-endpoint'] }} ${{ secrets.S3_STORAGE_ACCESS_KEY }} ${{ secrets.S3_STORAGE_SECRET_KEY }}
          ./mc cp otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz target/${{ github.event.inputs['s3-bucket-name'] }}/erlang/${{ github.event.inputs['erlang-version'] }}/erlang-${{ github.event.inputs['erlang-version'] }}-build-macos-arm64.tar.gz

      - name: Upload Erlang build tarball
        uses: actions/upload-artifact@v4
        with:
          name: erlang-build-macos-arm64
          path: otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz

  # This job was heavily taken from the upstream Github Actions workflow
  # because the build script for Windows is crap and it's hard to get it right.
  build-windows:
    defaults:
      run:
        shell: wsl-bash {0}
    runs-on: windows-latest
    needs: download-erlang
    steps:
      - name: Set up WSL (Ubuntu 18.04)
        uses: Vampire/setup-wsl@v3.1.1
        with:
          distribution: Ubuntu-18.04

      - name: Install WSL dependencies
        run: apt update && apt install -y g++-mingw-w64 gcc-mingw-w64 make autoconf unzip

      - name: Install OpenSSL
        shell: cmd
        run: |
          choco install openssl --version=3.1.1
          IF EXIST "c:\\Program Files\\OpenSSL-Win64" (move "c:\\Program Files\\OpenSSL-Win64" "c:\\OpenSSL-Win64") ELSE (move "c:\\Program Files\\OpenSSL" "c:\\OpenSSL-Win64")

      - name: Download Erlang source tarball
        uses: actions/download-artifact@v4
        with:
          name: erlang-source

      - name: Build Erlang
        run: |
          tar -xzf otp_src_${{ github.event.inputs['erlang-version'] }}.tar.gz
          cd otp_src_${{ github.event.inputs['erlang-version'] }}
          export ERL_TOP=`pwd`
          export MAKEFLAGS=-j$(($(nproc) + 2))
          export ERLC_USE_SERVER=true
          export ERTS_SKIP_DEPEND=true
          eval `./otp_build env_win32 x64`
          ./otp_build configure --without-wx --without-jinterface --without-odbc
          ./otp_build boot -a
          ./otp_build release -a
          cd ../
          mv otp_src_${{ github.event.inputs['erlang-version'] }}/release/win32 otp_build_${{ github.event.inputs['erlang-version'] }}
          tar -czf otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz otp_build_${{ github.event.inputs['erlang-version'] }}

      - name: Upload build to S3 storage
        if: ${{ github.event.inputs['upload-builds'] == 'true' }}
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set target ${{ github.event.inputs['s3-storage-endpoint'] }} ${{ secrets.S3_STORAGE_ACCESS_KEY }} ${{ secrets.S3_STORAGE_SECRET_KEY }}
          ./mc cp otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz target/${{ github.event.inputs['s3-bucket-name'] }}/erlang/${{ github.event.inputs['erlang-version'] }}/erlang-${{ github.event.inputs['erlang-version'] }}-build-windows-amd64.tar.gz

      - name: Upload Erlang build tarball
        uses: actions/upload-artifact@v4
        with:
          name: erlang-build-windows-amd64
          path: otp_build_${{ github.event.inputs['erlang-version'] }}.tar.gz
